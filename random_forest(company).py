# -*- coding: utf-8 -*-
"""Random Forest(Company).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17zyJC_0LpxK38EUbsyvhSST6FK7GxgDC
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
df=pd.read_csv("Company_Data.csv")
df

# let's plot pair plot to visualise the attributes all at once

import seaborn as sns 
sns.pairplot(data=df, hue = 'ShelveLoc')

df.hist()

##Label encoding

from sklearn.preprocessing import LabelEncoder
LE=LabelEncoder()
df['ShelveLoc']=LE.fit_transform(df['ShelveLoc'])
df['Urban']=LE.fit_transform(df['Urban'])
df['US']=LE.fit_transform(df['US'])

#Spliot the variable

X=df.iloc[:,1:10]

Y=df['Sales']

# data partition

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.30)

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

RFR = RandomForestRegressor(n_estimators=500,max_depth=15,max_features=0.7,
                      max_samples=0.6,random_state=10)

RFR.fit(X_train, Y_train)
Y_pred_train = RFR.predict(X_train) 
Y_pred_test = RFR.predict(X_test) 
Training_err = mean_squared_error(Y_train,Y_pred_train).round(2)
Test_err = mean_squared_error(Y_test,Y_pred_test).round(2)

print("Training_error: ",Training_err.round(2)*100)
print("Test_error: ",Test_err.round(2)*100)

from sklearn.ensemble import GradientBoostingRegressor
GBR = GradientBoostingRegressor(n_estimators=250,
                                max_depth=5,
                                max_features=0.7,
                                random_state=10,learning_rate=0.01)

GBR.fit(X_train, Y_train)
Y_pred_train = GBR.predict(X_train) 
Y_pred_test = GBR.predict(X_test) 
Training_err = mean_squared_error(Y_train,Y_pred_train).round(2)
Test_err = mean_squared_error(Y_test,Y_pred_test).round(2)

print("Training_error: ",Training_err.round(2))
print("Test_error: ",Test_err.round(2))

from sklearn.ensemble import GradientBoostingRegressor
GBR = GradientBoostingRegressor(n_estimators=250,
                                max_depth=5,
                                max_features=0.7,
                                random_state=10,learning_rate=0.01)

GBR.fit(X_train, Y_train)
Y_pred_train = GBR.predict(X_train) 
Y_pred_test = GBR.predict(X_test) 
Training_err = mean_squared_error(Y_train,Y_pred_train).round(2)
Test_err = mean_squared_error(Y_test,Y_pred_test).round(2)

print("Training_error: ",Training_err.round(2))
print("Test_error: ",Test_err.round(2))

